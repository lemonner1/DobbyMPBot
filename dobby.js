import { Telegraf } from 'telegraf'
import { message } from 'telegraf/filters'
import { Markup } from 'telegraf'
import axios from 'axios'
import elements from './questions.js'
import fs from 'fs'

const progressFilePath = './based.json'
const scheduleStorm = './schedule.json'

const loadProgress = () => {
    if (fs.existsSync(progressFilePath)) {
        const data = fs.readFileSync(progressFilePath, 'utf8')
        return JSON.parse(data)
    }
    return { users: {}, completedUsers: []}
}

const saveProgress = (data) => {
    fs.writeFileSync(progressFilePath, JSON.stringify(data, null, 2))
}

const loadSchedule = () => {
    if (fs.existsSync(scheduleStorm)) {
        const data = fs.readFileSync(scheduleStorm, 'utf8')
        return JSON.parse(data)
    }
    return {}
}

const saveSchedule = (data) => {
    fs.writeFileSync(scheduleStorm, JSON.stringify(data, null, 2))
}
const schedule = loadSchedule()

// –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –Ω–æ—Ä–º —Ñ–æ—Ä–º–∞—Ç –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞
const formatTime = (ms) => {
    const totalSeconds = Math.floor(ms / 1000)
    const hours = String(Math.floor(totalSeconds / 3600)).padStart(2, '0')
    const minutes = String(Math.floor((totalSeconds % 3600) / 60)).padStart(2, '0')
    const seconds = String(totalSeconds % 60).padStart(2, '0')
    return `${hours}:${minutes}:${seconds}`
}

const progressData = loadProgress()
const initUser = (userId, username, initials) => {
    if (!progressData.users[userId]) {
        progressData.users[userId] = {
            username: username || 'Unknown',
            initials: initials,
            gender: '—Å—ç—Ä',
            currentElement: 0,
            lastAttempt: null,
            completed: false,
            startTime: Date.now(),
            completionTime: null,
            errors: 0,
            processing: false,
            faculty: null
        }
    }
}
saveProgress(progressData)

const bot = new Telegraf('') // insert ur bot token here
const isModerator = (userId) => progressData.moderators.includes(userId)
const moderatorState = {}
const introState = {}
const winningMessage = (from) => `<b>–ë—Ä–∞–≤–æ!</b> –î–æ–±–±–∏ –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ—Ç ${progressData.users[from.id].gender == '—Å—ç—Ä' ? '—Å—ç—Ä–∞' : '–º–∏—Å—Å'} <b>${from.first_name}</b> —Å –ø–æ–±–µ–¥–æ–π –≤ <b>–¢—É—Ä–Ω–∏—Ä–µ –¢—Ä—ë—Ö –í–æ–ª—à–µ–±–Ω–∏–∫–æ–≤</b>. 

üèÜ –í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è! ${getMedal(progressData.completedUsers.indexOf(from.id) + 1) ? `–í—ã –ø–æ–ª—É—á–∏–ª–∏ <b>${getMedal(progressData.completedUsers.indexOf(from.id) + 1)}</b> –∑–∞ ${progressData.completedUsers.indexOf(from.id) + 1}-–µ –º–µ—Å—Ç–æ!` : `–í—ã –∑–∞–Ω—è–ª–∏ ${progressData.completedUsers.indexOf(from.id) + 1}-–µ –º–µ—Å—Ç–æ!`}
‚è± –í–∞—à–µ –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞: ${progressData.users[from.id].completionTime}
‚ùó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –≤–∞–º–∏ –æ—à–∏–±–æ–∫: ${progressData.users[from.id].errors} 

–ü–æ–π–¥—ë–º—Ç–µ —Å–∫–æ—Ä–µ–µ –≤ –õ–∞–≤–∫—É –ü–∞–ª—É–º–Ω—ã –õ–∞–≤–≥—É—Ç, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–æ—Ç —Ç—É—Ç —Å–æ–≤—Å–µ–º —Ä—è–¥–æ–º *–î–æ–±–±–∏ —Ç—ã–∫–∞–µ—Ç –Ω–∞ –∫–∞—Ä—Ç—É*, —Ç–∞–º –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å —Å–≤–æ–π –ø—Ä–∏–∑!

–ü—Å—Å...–ï—Å–ª–∏ –ü–æ–ª—É–º–Ω—ã —Ç–∞–º –Ω–µ—Ç, –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–≤—É —ç—Ç–æ–º—É –≤–æ–ª—à–µ–±–Ω–∏–∫—É –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π –ø—Ä–∏–∑ - @lemonnerlime`

// #region –ü–∞–Ω–µ–ª—å–∫–∞
bot.command('events', async (ctx) => {
    const commonButtons = [
        [Markup.button.callback('üèÜ –†–µ–π—Ç–∏–Ω–≥ –§–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤', 'show_points')],
        [Markup.button.callback('üìÖ –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π', 'show_schedule')],
        [Markup.button.callback('üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞', 'show_stats')]]

    const moderatorButtons = isModerator(ctx.from.id) ? [
        [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ—á–∫–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É', 'add_points')],
        [Markup.button.callback('üë• –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', 'show_users')],
        [Markup.button.callback('üîí –ó–∞–∫—Ä—ã—Ç—å –Ω–∞–±–æ—Ä –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', 'close_event')],
        [Markup.button.callback('üîÖ –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç', 'update_spots')]] : []

    const cancelButton = [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_action')]

    const keyboard = Markup.inlineKeyboard([...commonButtons, ...moderatorButtons, cancelButton])

    await ctx.reply('üìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboard)
})

bot.action('show_events', async (ctx) => {
    const commonButtons = [
        [Markup.button.callback('üèÜ –†–µ–π—Ç–∏–Ω–≥ –§–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤', 'show_points')],
        [Markup.button.callback('üìÖ –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π', 'show_schedule')],
        [Markup.button.callback('üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞', 'show_stats')]]

    const moderatorButtons = isModerator(ctx.from.id) ? [
        [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ—á–∫–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É', 'add_points')],
        [Markup.button.callback('üë• –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', 'show_users')],
        [Markup.button.callback('üîí –ó–∞–∫—Ä—ã—Ç—å –Ω–∞–±–æ—Ä –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', 'close_event')],
        [Markup.button.callback('üîÖ –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç', 'update_spots')]] : []

    const cancelButton = [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_action')]

    const keyboard = Markup.inlineKeyboard([...commonButtons, ...moderatorButtons, cancelButton])

    await ctx.editMessageText('üìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboard)
})

const facultyNamesRu = {
    gryffindor: '–ì—Ä–∏—Ñ—Ñ–∏–Ω–¥–æ—Ä',
    hufflepuff: '–ü—É—Ñ—Ñ–µ–Ω–¥—É–π',
    ravenclaw: '–ö–æ–≥—Ç–µ–≤—Ä–∞–Ω',
    slytherin: '–°–ª–∏–∑–µ—Ä–∏–Ω'
}

bot.action('add_points', async (ctx) => {
    if (!isModerator(ctx.from.id)) {
        await ctx.answerCbQuery('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.')
        return
    }

    moderatorState[ctx.from.id] = { action: ctx.match[0] }

    const facultyButtons = Object.keys(progressData.faculties).map((faculty) =>
        [Markup.button.callback(facultyNamesRu[faculty], `select_faculty_${faculty}`)]
    )

    const cancelButton = [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_action')]
    const keyboard = Markup.inlineKeyboard([...facultyButtons, cancelButton])

    await ctx.editMessageText(
        `üîπ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤:`,
        keyboard
    )
})

bot.action('cancel_action', async (ctx) => {
    if (moderatorState[ctx.from.id]) {
        delete moderatorState[ctx.from.id]
    }

    await ctx.editMessageText('‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
})

bot.action('show_points', async (ctx) => {
    const userId = ctx.from.id

    if (!introState[userId]) {
        introState[userId] = true
        await ctx.answerCbQuery()
        await ctx.reply(
            `üèÜ <b>–ö—É–±–æ–∫ –•–æ–≥–≤–∞—Ä—Ç—Å–∞</b>:\n\n` +
            `–î–æ–±–±–∏ —Ä–∞—Å—Å–∫–∞–∂–µ—Ç —á—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ. –ö—É–±–æ–∫ –•–æ–≥–≤–∞—Ä—Ç—Å–∞ ‚Äî –Ω–∞–≥—Ä–∞–¥–∞, –≤—Ä—É—á–∞–µ–º–∞—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É, –Ω–∞–±—Ä–∞–≤—à–µ–º—É –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –∑–∞ –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –í—ã –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö –∏ –ø—Ä–∏–Ω–æ—Å–∏—Ç—å –±–∞–ª–ª—ã —Å–≤–æ–µ–º—É —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É. 
            
–ö—Å—Ç–∞—Ç–∏, –≤ 17:30 –±—É–¥–µ—Ç –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ü—Ä–æ—Ä–æ–∫ –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤ –∏, –µ—Å–ª–∏ –≤—ã –≤ —ç—Ç–æ –≤—Ä–µ–º—è —Å–≤–æ–±–æ–¥–Ω—ã, —Ç–æ –º–æ–∂–µ—Ç–µ –ø–æ–¥–æ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω—ã–π –∑–∞–ª.`, { parse_mode: 'HTML' }
        )
    }

    const scores = Object.entries(progressData.faculties).map(([faculty, points]) => `${facultyNamesRu[faculty]}: ${points}`).join('\n')

    await ctx.reply(`üìä <b>–¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤:</b>\n\n${scores}`, { parse_mode: 'HTML' })
})

bot.action('show_schedule', async (ctx) => {
    const updatedSchedule = sortEventsByTime(updateEventStatus(schedule))

    if (updatedSchedule.length == 0) {
        await ctx.reply("–ö–∞–∂–µ—Ç—Å—è, —Å–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –î–æ–±–±–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥–æ—Ö–Ω—É—Ç—å")
        return
    }

    const eventList = updatedSchedule.map(event => {
        const statusIcon = getStatusIcon(event.status)
        return `
‚öúÔ∏è <b>${event.name}</b>
‚è∞ <b>–í—Ä–µ–º—è:</b> ${event.startTime}‚Äì${event.endTime}
üó∫ <b>–ó–∞–ª:</b> ${event.hall}
üë§ <b>–í–µ–¥—É—â–∏–π:</b> ${event.host}
üîó <a href="${event.link}" target="_blank">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>
${statusIcon} <b>–°—Ç–∞—Ç—É—Å:</b> ${event.status}
üí∫ <b>–ó–∞–Ω—è—Ç—ã–µ –º–µ—Å—Ç–∞:</b> ${event.occupiedSpots}/${event.maxPlayers}
`}).join('')

    await ctx.reply(`${eventList}
üè∞ –í–æ—Ç –∫–∞—Ä—Ç–∞, —á—Ç–æ–±—ã –≤–∞–º –±—ã–ª–æ –ª–µ–≥—á–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è!`, { parse_mode: 'HTML', disable_web_page_preview: true })
    await ctx.replyWithPhoto({ source: './pictures/hny.png' })
})

function updateEventStatus(schedule) {
    const now = new Date()
    const currentTime = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`

    return schedule.map(event => {
        if (event.endTime <= currentTime) {
            return null
        }
        if (currentTime < event.startTime) {
            event.status = "–û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
        } else if (currentTime >= event.startTime && event.status !== "–í –∏–≥—Ä–µ") {
            event.status = event.occupiedSpots < event.maxPlayers 
                ? "–û–∂–∏–¥–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤" 
                : "–û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
        }
        return event
    }).filter(event => event)
}

function sortEventsByTime(schedule) {
    return schedule.sort((a, b) => a.startTime.localeCompare(b.startTime))
}

function getStatusIcon(status) {
    switch (status) {
        case "–í –∏–≥—Ä–µ": return "üü¢"
        case "–û–∂–∏–¥–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤": return "üü°"
        case "–û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è": return "üî¥"
        default: return "‚ö™"
    }
}

bot.action('close_event', async (ctx) => {
    const eventButtons = Object.keys(schedule)
        .filter(event => (schedule[event].status == "–û–∂–∏–¥–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤" || schedule[event].status == "–û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"))
        .map(event => 
            [Markup.button.callback(
                `${schedule[event].name} (${schedule[event].occupiedSpots}/${schedule[event].maxPlayers}) - ${schedule[event].startTime}`, 
                `select_event_close_${schedule[event].id}`
            )]
        )

    const keyboard = Markup.inlineKeyboard([...eventButtons, [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_action')]], { columns: 1 })
    await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–∞–±–æ—Ä–∞:', keyboard)
})

bot.action(/select_event_close_(.+)/, async (ctx) => {
    const eventName = ctx.match[1]
    moderatorState[ctx.from.id] = { eventName, action: 'close_event' }

    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', `confirm_close_${eventName}`)],
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_action')]
    ])
    await ctx.editMessageText(`‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –Ω–∞–±–æ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"?`, keyboard)
})

bot.action(/confirm_close_(.+)/, async (ctx) => {
    const eventName = ctx.match[1]

    const event = schedule.find(event => event.id == eventName)
    if (event) {
        event.status = "–í –∏–≥—Ä–µ"
        saveSchedule(schedule)
        await ctx.editMessageText(`–ù–∞–±–æ—Ä –¥–ª—è "${event.name}" –∑–∞–∫—Ä—ã—Ç, –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞—á–∞—Ç–æ!`)
    }

    delete moderatorState[ctx.from.id]
})

bot.action('update_spots', async (ctx) => {
    const eventButtons = Object.keys(schedule)
        .filter(event => (schedule[event].status == "–û–∂–∏–¥–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤" || schedule[event].status == "–û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"))
        .map(event => 
            [Markup.button.callback(
                `${schedule[event].name} (${schedule[event].occupiedSpots}/${schedule[event].maxPlayers}) - ${schedule[event].startTime}`, 
                `select_event_add_${schedule[event].id}`
            )]
        )

    const keyboard = Markup.inlineKeyboard([...eventButtons, [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_action')]], { columns: 1 })
    await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', keyboard)
})

bot.action(/select_event_add_(.+)/, async (ctx) => {
    const eventName = ctx.match[1]
    moderatorState[ctx.from.id] = { eventName, action: 'update_spots' }

    const event = schedule.find(event => event.id == eventName)
    if (event) {
        const keyboard = Markup.inlineKeyboard([[Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_action')]])
        const message = await ctx.editMessageText(`üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–±—ã–≤—à–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è "${event.name}":`, { reply_markup: keyboard.reply_markup })
        moderatorState[ctx.from.id].messageId = message.message_id
        return
    }
})

bot.action('show_users', async (ctx) => {
    if (!isModerator(ctx.from.id)) {
        await ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    }

    if (Object.keys(progressData.users).length == 0) {
        await ctx.reply("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        return
    }

    const userList = Object.entries(progressData.users)
        .map(([id, data]) => {
            const statusIcons = `${isModerator(Number(id)) ? '‚≠ê' : ''}${progressData.bannedUsers.includes(Number(id)) ? 'üö´' : ''}`.trim()

            return `${statusIcons} ${data.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'} (ID: ${id}): ${
                data.completed
                    ? `‚úÖ –ó–∞–≤–µ—Ä—à–∏–ª –∑–∞ ${data.completionTime}, –æ—à–∏–±–æ–∫: ${data.errors}` 
                    : `‚è≥ –ù–µ –∑–∞–≤–µ—Ä—à–∏–ª, –æ—à–∏–±–æ–∫: ${data.errors}`
            }`
        })
        .join('\n')

    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π', 'show_winners')],
        [Markup.button.callback('–í–µ—Ä–Ω—É—Ç—å—Å—è', 'show_events')]
    ])

    await ctx.editMessageText(`–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n${userList}`, keyboard)
})

bot.action('show_stats', async (ctx) => {
    const userId = ctx.from.id
    const user = progressData.users[userId]

    if (!user) {
        await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –∫–≤–µ—Å—Ç—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!')
        return
    }

    const place = progressData.completedUsers.includes(userId)
        ? progressData.completedUsers.indexOf(userId) + 1
        : null

    const statsMessage = `
üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>

- ${user.initials} (${user.username})

- ${place ? `–ú–µ—Å—Ç–æ –≤ —Ç—É—Ä–Ω–∏—Ä–µ: ${getMedal(place)} ${place}` : `–í—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∫–≤–µ—Å—Ç. –¢–µ–∫—É—â–∏–π —ç—Ç–∞–ø: #${user.currentElement + 1}`}
- ‚è± –ü—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: ${place ? user.completionTime : formatTime(Date.now() - user.startTime).toLocaleString()}
- ‚ùå –û—à–∏–±–æ–∫: ${user.errors}
- üè† –í–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç: ${facultyNamesRu[user.faculty]}
    `

    await ctx.reply(statsMessage.trim(), { parse_mode: 'HTML' })
})

bot.action('show_winners', async (ctx) => {
    if (!isModerator(ctx.from.id)) {
        await ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    }

    const winnersList = progressData.completedUsers
        .map((id, index) => {
            const data = progressData.users[id]
            if (!data) return null
            return `üèÜ ${index + 1}-–µ –º–µ—Å—Ç–æ: ${data.initials || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'} (ID: ${data.username}) ‚Äî –ó–∞–≤–µ—Ä—à–∏–ª –∑–∞ ${data.completionTime}, –æ—à–∏–±–æ–∫: ${data.errors}`
        })
        .filter(Boolean)
        .join('\n');

    const winnersMessage = winnersList.length > 0 
        ? `–°–ø–∏—Å–æ–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:\n${winnersList}`
        : "–°–ø–∏—Å–æ–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –ø—É—Å—Ç."

    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', 'show_users')],
    ]);

    await ctx.editMessageText(winnersMessage, keyboard )
})

function getMedal(place) {
    if (place == 1) return 'ü•á'
    if (place == 2) return 'ü•à'
    if (place == 3) return 'ü•â'
    return ''
}

// #endregion

const sendElement = async (ctx, userId) => {
    const element = elements[progressData.users[userId]?.currentElement || 0]

    if (!element) {
        await ctx.replyWithPhoto({ source: './pictures/hny.png' }, { 
            caption: winningMessage(ctx.from), 
            parse_mode: 'HTML' 
        })
        return
    }

    element.intro ? await ctx.reply(element.intro(ctx.from, progressData.users[ctx.from.id].gender), { parse_mode: 'HTML' }) : ''
    element.type == "question" ? element.question ? await ctx.reply(element.question, { parse_mode: 'HTML' }) : '' : element.type == "task" ? element.task ? await ctx.reply(element.task, { parse_mode: 'HTML' }) : '' : ''
    element.image ? await ctx.replyWithPhoto({ source: element.image }) : ''
}

// #region –°—Ç–∞—Ä—Ç
bot.start(async (ctx) => {
    const userId = ctx.from.id

    if (progressData.bannedUsers.includes(userId)) {
        await ctx.reply("–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –±–æ—Ç–æ–º.")
        return
    }

    if (progressData.users[userId]?.completed) {
        await ctx.replyWithPhoto({ source: './pictures/hny.png' }, { 
            caption: winningMessage(ctx.from), 
            parse_mode: 'HTML' 
        })
        return
    }

    if (progressData.users[userId]) {
        await sendElement(ctx, userId)
        return
    }

    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç', 'start_quest')],
        [Markup.button.callback('üèÜ –†–µ–π—Ç–∏–Ω–≥ –§–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤', 'show_points')],
        [Markup.button.callback('üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π', 'show_schedule')],
    ])

    await ctx.reply(`–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä, ${ctx.from.first_name}! –ú–µ–Ω—è –∑–æ–≤—É—Ç –î–æ–±–±–∏! –î–æ–±–±–∏ - –¥–æ–º–∞—à–Ω–∏–π —ç–ª—å—Ñ. –ò —Å–µ–≥–æ–¥–Ω—è –î–æ–±–±–∏ –±—É–¥–µ—Ç –ø–æ–º–æ–≥–∞—Ç—å –í–∞–º –ø—Ä–æ–π—Ç–∏ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ –∏ –ø–æ–≤–µ—Å–µ–ª–∏—Ç—å—Å—è –æ—Ç –¥—É—à–∏ –Ω–∞ –ø—Ä–µ–¥–Ω–æ–≤–æ–≥–æ–¥–Ω–µ–π –≤–µ—á–µ—Ä–∏–Ω–∫–µ <b><i>‚ÄúHarry New Year‚Äù</i></b>.

–î–æ–±–±–∏ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –∏ —Å—Ç—É–¥–µ–Ω—Ç—ã –•–æ–≥–≤–∞—Ä—Ç—Å–∞. –ò –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –∑–∞–¥–∞–Ω–∏—è–º–∏, ${ctx.from.first_name} –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–º–æ—â–∏ —É –î–æ–±–±–∏. –ö—Ä–æ–º–µ —Ç–æ–≥–æ –î–æ–±–±–∏ –º–æ–∂–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–∞ –≤–µ—á–µ—Ä–∏–Ω–∫–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–±—Ä–∞–ª–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã –≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–∏ –∑–∞ –ö—É–±–æ–∫ –•–æ–≥–≤–∞—Ä—Ç—Å–∞.

–•–æ—Ç–µ–ª–∏ –±—ã –≤—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–º <b>‚Äú–¢—É—Ä–Ω–∏—Ä–µ —Ç—Ä—ë—Ö –≤–æ–ª—à–µ–±–Ω–∏–∫–æ–≤‚Äù?</b>`, 
        { parse_mode: 'HTML', reply_markup: keyboard.reply_markup }
    )
})

bot.action('start_quest', async (ctx) => {
    const userId = ctx.from.id

    if (progressData.users[userId]) {
        await ctx.editMessageText('–£–¥–∞—á–∏! üí™ –ü–æ–±–µ–¥–∏—Ç —É–º–Ω–µ–π—à–∏–π!')
        await sendElement(ctx, userId)
        return
    }

    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üßô‚Äç‚ôÇÔ∏è –°—ç—Ä', 'select_gender_sir')],
        [Markup.button.callback('üßô‚Äç‚ôÄÔ∏è –ú–∏—Å—Å', 'select_gender_miss')],
    ])

    await ctx.editMessageText('–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –î–æ–±–±–∏ –º–æ–∂–µ—Ç –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?', {
        reply_markup: keyboard.reply_markup,
    })
})

bot.action('select_gender_sir', async (ctx) => {
    const userId = ctx.from.id

    introState[userId] = { gender: '—Å—ç—Ä' }

    await promptFacultySelection(ctx)
})

bot.action('select_gender_miss', async (ctx) => {
    const userId = ctx.from.id

    introState[userId] = { gender: '–º–∏—Å—Å' }

    await promptFacultySelection(ctx)
})

async function promptFacultySelection(ctx) {
    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('ü¶Å –ì—Ä–∏—Ñ—Ñ–∏–Ω–¥–æ—Ä', 'select_faculty_gryffindor')],
        [Markup.button.callback('ü¶° –ü—É—Ñ—Ñ–µ–Ω–¥—É–π', 'select_faculty_hufflepuff')],
        [Markup.button.callback('ü¶Ö –ö–æ–≥—Ç–µ–≤—Ä–∞–Ω', 'select_faculty_ravenclaw')],
        [Markup.button.callback('üêç –°–ª–∏–∑–µ—Ä–∏–Ω', 'select_faculty_slytherin')],
    ])

    await ctx.editMessageText('–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:', {
        reply_markup: keyboard.reply_markup,
    })
}

bot.action(/select_faculty_(.+)/, async (ctx) => {
    const userId = ctx.from.id
    const faculty = ctx.match[1]
    if (moderatorState[userId]) {
        moderatorState[userId].faculty = faculty

        const cancelButton = [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_action')]
        const keyboard = Markup.inlineKeyboard(cancelButton)

        const message = await ctx.editMessageText(
            `üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ "${facultyNamesRu[faculty]}":`,
            { reply_markup: keyboard.reply_markup }
        )

        moderatorState[userId].messageId = message.message_id
        return
    } 

    initUser(
        userId,
        ctx.from.username,
        ctx.from.last_name ? `${ctx.from.first_name} ${ctx.from.last_name}` : ctx.from.first_name
    )

    progressData.users[userId].gender = introState[userId]?.gender
    progressData.users[userId].faculty = faculty
    
    // if (introState[userId].gender)
    //     delete introState[userId].gender

    saveProgress(progressData)

    console.log(
        `\x1b[32m[START]\x1b[0m –£—á–∞—Å—Ç–Ω–∏–∫ "${ctx.from.last_name ? ctx.from.first_name + ' ' + ctx.from.last_name : ctx.from.first_name}" –≤—ã–±—Ä–∞–ª —Ñ–∞–∫—É–ª—å—Ç–µ—Ç \x1b[34m${facultyNamesRu[faculty]}\x1b[0m –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–≤–µ—Å—Ç—É.`
    )

    await ctx.editMessageText(
        `–£–¥–∞—á–∏! üí™ –ü–æ–±–µ–¥–∏—Ç —É–º–Ω–µ–π—à–∏–π!`
    )

    await sendElement(ctx, userId)
})
// #endregion

// #region –•–µ–ª–ø
bot.help(async (ctx) => {
    const userId = ctx.from.id

    let response = `üí° –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –º–æ–∂–µ—Ç–µ –ø–æ–¥–æ–π—Ç–∏ –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ –ø–µ—Ä–≤–æ–º —ç—Ç–∞–∂–µ —É –∫–∞—Å—Å—ã –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —ç—Ç–æ–º—É –≤–æ–ª—à–µ–±–Ω–∏–∫—É - @lemonnerlime`

    await ctx.reply(response)
})
// #endregion

bot.hears('u nigger', async (ctx) => await ctx.reply('u too‚ù§Ô∏è'))
bot.hears('–¥—É—à–∏ –º–µ–Ω—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –∂–µ–Ω—â–∏–Ω–∞', async (ctx) => {await ctx.replyWithVideo({ source: './rela.mp4' })})

// #region –†–µ—Å—Ç–∞—Ä—Ç
bot.command('restart', async (ctx) => {
    const userId = ctx.from.id

    if (!progressData.users[userId]) {
        await ctx.reply('–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. –ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç.')
        return
    }

    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîÑ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫', 'confirm_restart')],
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_restart')],
    ])

    await ctx.reply(
        '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –≤—Å—ë –∑–∞–Ω–æ–≤–æ? ‚ùóÔ∏è\n–í–∞—à —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.',
        keyboard
    )
})

bot.action('confirm_restart', async (ctx) => {
    const userId = ctx.from.id

    if (!progressData.users[userId]) {
        await ctx.answerCbQuery('–£ –≤–∞—Å —É–∂–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. –ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç.', { show_alert: true })
        return
    }

    delete progressData.users[userId]
    progressData.completedUsers = progressData.completedUsers.filter(id => id !== userId)
    saveProgress(progressData)

    console.log(`\x1b[34m[RESTART]\x1b[0m –£—á–∞—Å—Ç–Ω–∏–∫ "${ctx.from.last_name ? ctx.from.first_name + ' ' + ctx.from.last_name : ctx.from.first_name}" –ø–æ–∫–∏–Ω—É–ª –∫–≤–µ—Å—Ç.`)
     
    await ctx.editMessageText(
        '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω'
    )
})

bot.action('cancel_restart', async (ctx) => {
    await ctx.editMessageText('–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω. –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω.')
})
// #endregion

// #region –ë–ê–ù
bot.command('ban', async (ctx) => {
    if (!isModerator(ctx.from.id)) {
        await ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    }

    const args = ctx.message.text.split(' ')
    if (args.length !== 2) {
        await ctx.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /ban [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]")
        return
    }

    const targetId = args[1]

    if (isNaN(parseInt(targetId, 10))) {
        await ctx.reply("–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    }

    if (!progressData.users[targetId]) {
        await ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    }

    await ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${targetId} (${progressData.users[targetId].username}) –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –∏ —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã.`)
    console.log(`\x1b[31m[BAN]\x1b[0m –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${ctx.from.last_name ? ctx.from.first_name + ' ' + ctx.from.last_name : ctx.from.first_name} –∑–∞–±–∞–Ω–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${targetId} (${progressData.users[targetId].username})`)

    delete progressData.users[targetId]

    const completedIndex = progressData.completedUsers.indexOf(parseInt(targetId, 10))
    if (completedIndex !== -1) {
        progressData.completedUsers.splice(completedIndex, 1)
    }

    if (!progressData.bannedUsers.includes(parseInt(targetId, 10))) {
        progressData.bannedUsers.push(parseInt(targetId, 10))
    }

    saveProgress(progressData)

    try {
        await bot.telegram.sendMessage(
            targetId,
            `–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –∏ –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –±–æ—Ç–æ–º. –ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ${ctx.from.last_name ? ctx.from.first_name + ' ' + ctx.from.last_name : ctx.from.first_name}.`
        )
    } catch (error) {
        console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID ${targetId}: ${error.message}`)
    }
})
// #endregion

// #region –ú–û–î
bot.command('mod', async (ctx) => {
    if (!isModerator(ctx.from.id)) {
        await ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    }

    const args = ctx.message.text.split(' ')
    if (args.length !== 2) {
        await ctx.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /mod [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]")
        return
    }

    const targetId = args[1]

    if (progressData.moderators.includes(parseInt(targetId, 10))) {
        await ctx.reply("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")
        return
    }

    progressData.moderators.push(parseInt(targetId, 10))

    let username
    try {
        const chat = await bot.telegram.getChat(targetId)
        username = chat.username || `${chat.first_name || ''} ${chat.last_name || ''}`.trim() || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    } catch (error) {
        console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å ID ${targetId}: ${error.message}`)
    }

    saveProgress(progressData)

    await ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${targetId} (${username}) –±—ã–ª –ø–æ–≤—ã—à–µ–Ω –¥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.`)
    console.log(`\x1b[32m[PROMOTE]\x1b[0m –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${ctx.from.last_name ? ctx.from.first_name + ' ' + ctx.from.last_name : ctx.from.first_name} –ø–æ–≤—ã—Å–∏–ª –¥–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${targetId} (${username})`)

    try {
        await bot.telegram.sendMessage(
            targetId,
            `–í—ã –±—ã–ª–∏ –ø–æ–≤—ã—à–µ–Ω—ã –¥–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ <b>–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞</b> –∏ –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏ –±–æ—Ç–∞.

–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @lemonnerlime.`,
            { parse_mode: 'HTML' }
        )
    } catch (error) {
        console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID ${targetId}: ${error.message}`)
    }
})
// #endregion

// #region –ö–æ–Ω–µ—Ü –∫–≤–µ—Å—Ç–∞
bot.command('end', async (ctx) => {
    if (!isModerator(ctx.from.id)) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞.')
        return
    }

    if (progressData.questEnded) {
        await ctx.reply('–ö–≤–µ—Å—Ç —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω.')
        return
    }

    const confirmKeyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–≤–µ—Å—Ç', 'confirm_end')],
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_end')]
    ])

    await ctx.reply(
        '‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∫–≤–µ—Å—Ç? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.',
        confirmKeyboard
    )
})

bot.action('confirm_end', async (ctx) => {
    if (!isModerator(ctx.from.id)) {
        await ctx.answerCbQuery('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.')
        return
    }

    progressData.questEnded = true

    const facultyScores = Object.entries(progressData.faculties)
        .map(([faculty, score]) => `${facultyNamesRu[faculty]}: ${score} –±–∞–ª–ª–æ–≤`)
        .join('\n')

    const winners = progressData.completedUsers
        .map((userId, index) => {
            const user = progressData.users[userId]
            if (!user) return null

            let place
            if (index == 0)
                place = 'ü•á –ó–æ–ª–æ—Ç–∞—è –º–µ–¥–∞–ª—å'
            else if (index == 1)
                place = 'ü•à –°–µ—Ä–µ–±—Ä—è–Ω–∞—è –º–µ–¥–∞–ª—å'
            else if (index == 2)
                place = 'ü•â –ë—Ä–æ–Ω–∑–æ–≤–∞—è –º–µ–¥–∞–ª—å'
            else
                place = `${index + 1} –º–µ—Å—Ç–æ`

            return `${place}: ${user.initials || user.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'} ‚Äî –í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: ${user.completionTime}`
        })
        .filter(Boolean)
        .join('\n')

    const message = `üèÜ –ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ.üéâ\n\n–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:\n${winners}\n\nüèÖ –ö—É–±–æ–∫ –•–æ–≥–≤–∞—Ä—Ç—Å–∞:\n${facultyScores}`.trim()
    console.log(`\x1b[34m[END]\x1b[0m –ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω`)

    for (const userId of Object.keys(progressData.users)) {
        try {
            await bot.telegram.sendMessage(userId, message, { parse_mode: 'HTML' })
        } catch (error) {
            console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, error.message)
        }
    }

    saveProgress(progressData)
    await ctx.editMessageText('‚úÖ –ö–≤–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω.')
})

bot.action('cancel_end', async (ctx) => {
    await ctx.editMessageText('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
})

bot.use(async (ctx, next) => {
    const userId = ctx.from.id

    if (progressData.questEnded) {
        if (
            ctx.message &&
            ctx.message.text &&
            !['/help', '/events'].includes(ctx.message.text.split(' ')[0])
        ) {
            const user = progressData.users[userId]
            if (user) {
                const placeIndex = progressData.completedUsers.indexOf(userId)
                let placeMessage

                if (user.completed) {
                    if (placeIndex == 0) {
                        placeMessage = `–í—ã –∑–∞–Ω—è–ª–∏ 1-–µ –º–µ—Å—Ç–æ –∏ –ø–æ–ª—É—á–∏–ª–∏ ü•á –ó–æ–ª–æ—Ç—É—é –º–µ–¥–∞–ª—å`
                    } else if (placeIndex == 1) {
                        placeMessage = `–í—ã –∑–∞–Ω—è–ª–∏ 2-–µ –º–µ—Å—Ç–æ –∏ –ø–æ–ª—É—á–∏–ª–∏ ü•à –°–µ—Ä–µ–±—Ä—è–Ω—É—é –º–µ–¥–∞–ª—å`
                    } else if (placeIndex == 2) {
                        placeMessage = `–í—ã –∑–∞–Ω—è–ª–∏ 3-–µ –º–µ—Å—Ç–æ –∏ –ø–æ–ª—É—á–∏–ª–∏ ü•â –ë—Ä–æ–Ω–∑–æ–≤—É—é –º–µ–¥–∞–ª—å`
                    } else {
                        placeMessage = `–í—ã –∑–∞–Ω—è–ª–∏ ${placeIndex + 1}-–µ –º–µ—Å—Ç–æ`
                    }
                } else {
                    placeMessage = `–í—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å –Ω–∞ –≤–æ–ø—Ä–æ—Å–µ #${user.currentElement + 1}.`
                }

                const message = `–ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. ${placeMessage}`
                await ctx.reply(message)
            } else {
                await ctx.reply('–ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –í—ã –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ –∫–≤–µ—Å—Ç–µ')
            }
            return
        }
    }

    await next()
})
// #endregion

// #region –±–æ—Ç–æ–Ω —Ç–µ–∫—Å—Ç
bot.on(message('text'), async (ctx) => {
    const userId = ctx.from.id

    if (moderatorState[userId] && moderatorState[userId].action == 'update_spots') {
        const newParticipants = parseInt(ctx.message.text, 10)

        if (isNaN(newParticipants) || newParticipants < 0) {
            await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.')
            return
        }

        const { eventName, messageId } = moderatorState[userId]
        const event = schedule.find(event => event.id == eventName)

        if (!event) {
            await ctx.reply('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
            delete moderatorState[userId]
            return
        }

        if (event.occupiedSpots + newParticipants > event.maxPlayers) {
            await ctx.reply(`–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤! –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ ${event.maxPlayers - event.occupiedSpots} –º–µ—Å—Ç.`)
            return
        }

        if (messageId) {
            try {
                await ctx.telegram.editMessageReplyMarkup(ctx.chat.id, messageId, null, null)
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫:', error)
            }
        }

        event.occupiedSpots += newParticipants
        saveSchedule(schedule)

        await ctx.reply(`‚úÖ –¢–µ–ø–µ—Ä—å –∑–∞–Ω—è—Ç–æ ${event.occupiedSpots}/${event.maxPlayers} –º–µ—Å—Ç –¥–ª—è "${event.name}".`)
        delete moderatorState[userId]
        return
    }

    if (moderatorState[userId] && moderatorState[userId].faculty) {
        if (isNaN(parseInt(ctx.message.text, 10)) || ctx.message.text.length > 4) {
            await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–∞–ª–ª–æ–≤.')
            return
        }

        const { action, faculty, messageId } = moderatorState[userId]

        if (action == 'add_points') {
            progressData.faculties[faculty] += parseInt(ctx.message.text, 10)
        }
        saveProgress(progressData)

        if (messageId) {
            try {
                await ctx.telegram.editMessageReplyMarkup(ctx.chat.id, messageId, null, null)
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫:', error)
            }
        }

        console.log(`\x1b[36m[POINTS]\x1b[0m –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${ctx.from.last_name ? ctx.from.first_name + ' ' + ctx.from.last_name : ctx.from.first_name} \x1b[32m–¥–æ–±–∞–≤–∏–ª(–∞)\x1b[0m \x1b[33m${parseInt(ctx.message.text, 10)}\x1b[0m –æ—á–∫–æ–≤ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É \x1b[34m${facultyNamesRu[faculty]}\x1b[0m.`)
        await ctx.reply(`‚úÖ –û—á–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n${facultyNamesRu[faculty]}: ${progressData.faculties[faculty]} –æ—á–∫–æ–≤.`)

        delete moderatorState[userId]
        return
    }

    if (isModerator(ctx.from.id)) {
        await ctx.reply("–í—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –∏ –Ω–µ –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–≤–µ—Å—Ç–µ.")
        return
    }

    if (progressData.bannedUsers.includes(userId)) {
        await ctx.reply("–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –±–æ—Ç–æ–º.")
        return
    }

    if (!progressData.users[userId]) {
        await ctx.reply('–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. –ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç.')
        return
    }
    
    let usersElement = progressData.users[userId]

    initUser(userId, ctx.from.username, ctx.from.last_name ? ctx.from.first_name + ' ' + ctx.from.last_name : ctx.from.first_name)

    if (usersElement?.completed) {
        await ctx.replyWithPhoto({ source: './pictures/hny.png' }, { 
            caption: winningMessage(ctx.from), 
            parse_mode: 'HTML' 
        })
        return
    }

    const userAnswer = ctx.message.text.trim().toLowerCase()

    if (usersElement.lastAttempt && Date.now() - usersElement.lastAttempt < 120000) {
        const remainingTime = Math.ceil((120000 - (Date.now() - usersElement.lastAttempt)) / 1000)
        await ctx.reply(`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ ${remainingTime} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π.`)
        return
    }

    usersElement.lastAttempt = Date.now()

    if (elements[usersElement.currentElement]?.type == "question") {
        if (userAnswer == elements[usersElement.currentElement].answer.toLowerCase()) {
            if (elements[usersElement.currentElement].postanswer) {
                await ctx.reply((elements[usersElement.currentElement].postanswer(ctx.from, usersElement.gender)), { parse_mode: 'HTML' })
            }

            usersElement.currentElement += 1
            usersElement.lastAttempt = null

            if (usersElement.currentElement >= elements.length) {
                usersElement.completionTime = formatTime(Date.now() - usersElement.startTime)
                usersElement.completed = true
                progressData.completedUsers.push(userId)
                saveProgress(progressData)
                await ctx.replyWithPhoto({ source: './pictures/hny.png' }, { 
                    caption: winningMessage(ctx.from), 
                    parse_mode: 'HTML' 
                })
            } else {
                saveProgress(progressData)
                await sendElement(ctx, userId)
            }
        } else if (usersElement?.currentElement == 4 && (userAnswer.toLowerCase() == '–±–æ–≥–≥–∞—Ä—Ç' || userAnswer.toLowerCase() == '–∞–∑–∫–∞–±–∞–Ω' || userAnswer.toLowerCase() == '–ª—é–º–æ—Å')) {
            usersElement.lastAttempt = null
            saveProgress(progressData)
            await ctx.reply(`–ú–æ–ª–æ–¥–µ—Ü, —á—Ç–æ ${usersElement.gender} —ç—Ç–æ ${usersElement.gender == '—Å—ç—Ä' ? '–ø–æ–Ω—è–ª' : '–ø–æ–Ω—è–ª–∞'}! –ù–æ –≤–∞–º –Ω–∞–¥–æ —Ä–∞–∑–≥–∞–¥–∞—Ç—å —à–∏—Ñ—Ä –∏–∑ –º–æ–ª–Ω–∏–π!`)
        } else if (usersElement?.currentElement == 5) {
            usersElement.currentElement += 1
            usersElement.lastAttempt = null

            saveProgress(progressData)
            await ctx.reply((`–ß—Ç–æ? –ù–æ ${usersElement.gender}, –ø—Ä–∏ —á–µ–º –∑–¥–µ—Å—å ${userAnswer}? –ù—É –∏ —á—Ç–æ, —á—Ç–æ —Å—ç—Ä –ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä —Ö–æ–¥–∏–ª –∫—É–¥–∞-—Ç–æ –∏ –æ–∫—É–Ω–∞–ª —Ç–∞–º —Å–≤–æ—ë —è–π—Ü–æ, –≤—ã —Ç–æ —Ç—É—Ç –ø—Ä–∏—á—ë–º! –ù–∞—Å–ª—É—à–∞—é—Ç—Å—è –≤—Å—è–∫–∏—Ö –°–µ–¥—Ä–∏–∫–æ–≤...
–û–π –î–æ–±–±–∏ –Ω–µ —Ö–æ—Ç–µ–ª –≥—Ä—É–±–∏—Ç—å! –î–æ–±–±–∏ —Ç–æ–ª—å–∫–æ —Ö–æ—Ç–µ–ª —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–µ–∫—Ä–µ—Ç –∏–∑ —è–π—Ü–∞, ${usersElement.gender} <b>${ctx.from.first_name}</b> ${usersElement.gender == '—Å—ç—Ä' ? '–¥–æ–ª–∂–µ–Ω' : '–¥–æ–ª–∂–Ω–∞'} –Ω–∞–π—Ç–∏ —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª. –ù–∞–π–¥–∏—Ç–µ –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –î–æ–±–±–∏, —á—Ç–æ–±—ã –î–æ–±–±–∏ –ø–æ–º–æ–≥.`), { parse_mode: 'HTML' })
            await sendElement(ctx, userId)
        } else if (usersElement?.currentElement == 8) {
            const cleanedAnswer = userAnswer.replace(/[\s,\.]+/g, '').toLowerCase()

            if (cleanedAnswer == '–∫–Ω4—Å—Ç—Ä243—Å—Ç12—Å–ª34') {
                usersElement.lastAttempt = null
                await ctx.reply(`–≠—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç, ${usersElement.gender}! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –∫–Ω–∏–≥—É, –æ–Ω–∞ –≤–∞–º –ø–æ–º–æ–∂–µ—Ç`)
            }
        } else {
            usersElement.errors += 1
            saveProgress(progressData)
            await ctx.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã.")
        }
    } else {
        usersElement.lastAttempt = null
        await ctx.reply("–°–µ–π—á–∞—Å –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –∑–∞–¥–∞–Ω–∏—è.")
    }
})
// #endregion

// #region –±–æ—Ç–æ–Ω —Ñ–æ—Ç–æ
bot.on(message('photo'), async (ctx) => {
    const userId = ctx.from.id

    if (isModerator(ctx.from.id)) {
        await ctx.reply("–í—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –∏ –Ω–µ –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–≤–µ—Å—Ç–µ.")
        return
    }

    if (progressData.bannedUsers.includes(userId)) {
        await ctx.reply("–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –±–æ—Ç–æ–º.")
        return
    }

    if (!progressData.users[userId]) {
        await ctx.reply('–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. –ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç.')
        return
    }

    let usersElement = progressData.users[userId]
    initUser(userId, ctx.from.username, ctx.from.last_name ? ctx.from.first_name + ' ' + ctx.from.last_name : ctx.from.first_name)

    if (usersElement.completed) {
        await ctx.replyWithPhoto({ source: './pictures/hny.png' }, { 
            caption: winningMessage(ctx.from), 
            parse_mode: 'HTML' 
        })
        return
    }

    if (elements[usersElement.currentElement]?.type == "task") {
        if (!ctx.message.photo || ctx.message.photo.length == 0) {
            await ctx.reply("–§–æ—Ç–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        }

        const photoId = ctx.message.photo[ctx.message.photo.length - 1].file_id

        if (usersElement.processing) {
            return
        }

        usersElement.processing = true

        try {
            if (elements.postanswer) {
                await ctx.reply((elements.postanswer(ctx.from, usersElement.gender)), { parse_mode: 'HTML' })
            }

            const fileLink = await bot.telegram.getFileLink(photoId)
            const response = await axios({
                url: fileLink.href,
                method: 'GET',
                responseType: 'stream',
            })

            const writer = fs.createWriteStream(`./uploads/${ctx.from.username}_${Date.now()}.jpg`)
            response.data.pipe(writer)

            writer.on('finish', async () => {
                usersElement.processing = false
                usersElement.currentElement += 1
                saveProgress(progressData)

                if (usersElement.currentElement >= elements.length) {
                    usersElement.completionTime = formatTime(Date.now() - usersElement.startTime)
                    usersElement.completed = true
                    progressData.completedUsers.push(userId)
                    saveProgress(progressData)

                    await ctx.replyWithPhoto({ source: './pictures/hny.png' }, { 
                        caption: winningMessage(ctx.from), 
                        parse_mode: 'HTML' 
                    })
                } else {
                    await sendElement(ctx, userId)
                }
            })

            writer.on('error', async () => {
                usersElement.processing = false
                await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            })
        } catch (error) {
            console.error(error)
            usersElement.processing = false
            await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        }
    } else {
        await ctx.reply("–°–µ–π—á–∞—Å –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å, –∞ –Ω–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ñ–æ—Ç–æ.")
    }
})
// #endregion

bot.launch()